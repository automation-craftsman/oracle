name: Code Integration and Docker Container Deploy

on:
  push:
    branches:
    - dev

jobs:
  integration-and-code-quality-check:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the codes from repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Install node.js
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      # Step 3: Install dependencies for backend
      - name: Install backend dependencies
        run: |
          cd backend
          npm install

      # Step 4: Install dependencies for frontend (ignore if no package.json exists)
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install || true

      # Step 5: Run linting for JavaScript (backend and frontend)
      - name: Run JavaScript linting
        run: |
          cd backend
          npm run lint:js || true
          cd ../frontend
          npm run lint:js || true

      # Step 6: Run linting for HTML (frontend)
      - name: Run HTML linting
        run: |
          cd frontend
          npm run lint:html || true

      # Step 7: Run formatting check (backend and frontend)
      - name: Run formatting check
        run: |
          cd frontend
          npm run format -- --check || true
          cd ../backend
          npm run format -- --check || true

      # Step 8: Check code quality with SonarQube
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build-and-check-docker-image:
    needs: integration-and-code-quality-check
    runs-on: ubuntu-latest
    permissions:
      packages: write

    steps:
      # Step 1: Checkout the codes from repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Run lintng for Dockerfile
      - name: Lint dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./backend/Dockerfile

      # Step 3: Build sample docker image
      - name: Build docker image
        run: docker build --progress=plain --no-cache -t oracle:latest ./backend

      # Step 4: Docker image security scan for vulns'
      - name: Security scan with Trivy
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: 'oracle:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL'

  deploy-docker-image:
    needs: build-and-check-docker-image
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the codes from repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Step 3: Capture latest commit hash
      - name: Get latest commit hash
        id: commit_hash
        run: |
          echo "short_commit_hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      
      # Step 4: Build and push the image to Docker Hub
      - name: Build and push docker image
        if: success()
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/oracle-backend:${{ steps.commit_hash.outputs.short_commit_hash }}
            ${{ secrets.DOCKERHUB_USERNAME }}/oracle-backend:latest
